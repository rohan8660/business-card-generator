# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 110
indent-width = 4


[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", 'A',  # flake8-builtins
  'ASYNC', # https://docs.astral.sh/ruff/rules/#flake8-async-async
  'B',  # flake8-bugbear
  'BLE', # flake8-blind-except
  'C4',  # unnecessary comprehensions, map()
  'COM',  # flake8-commas
  'DTZ', # flake8-datetimez
  'E',  # pycodestyle
  'ERA',  # No commented out code
  'EXE', # flake8-executable
  'F',  # pyflakes
  'FLY',  # flynt
  'G',  # flake8-logging-format
  'I',  # isort
  'ICN', # https://github.com/joaopalmeiro/flake8-import-conventions
  'ISC', # https://pypi.org/project/flake8-implicit-str-concat/
  'LOG', # flake8-logging
  'PERF', # perflint
  'PIE', # https://pypi.org/project/flake8-pie/
  'PLC',  # Pylint conventions
  'PLE',  # Pylint error
  'PLW',  # Pylint warnings
  'PT',  # https://pypi.org/project/flake8-pytest-style/
  'PTH',  # flake8 use pathlib
  'RET', # https://pypi.org/project/flake8-return/
  'RUF',  # Ruff rules
  'S',  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  'SIM',  # https://pypi.org/project/flake8-simplify/
  'T',  # flake8-debugger
  'TRY',  # tryceratops
  'UP',  # pyupgrade
  'W',  # pycodestyle
  #'ARG',  # flake8 unused arguments (not really helpful, unused func args are common and ok)
  #'D',  # pydocstyle (too much)
  #'N',  # pep8-naming (too opinionated)
  #'NPY', # numpy
  #'PD', # pandas
  #'PL',  # Full Pylint (too much)
  #'PLR',  # Pylint refactor (too much/too opinionated)
  ]

ignore = [ 'B006', # Learn Python yo!
  'C408',  # Unnecessary dict/list call
  'COM819',  # Trailing commas is da bomb
  'E731',  # Do not assign to lambda
  'ERA001', 'T201', # comment code, prints are lax during development
  'G004', # Logging format string should not use f-string
  'RET503', # No explicit return None (all the other rules are about removing unnecessary things like this)
  'RUF012', # Mutable class attributes should be annotated with typing.ClassVar
  'S201', # debug=True
  'S311', # Standard pseudo-random generators are not suitable for security/cryptographic purposes
  'SIM108', # don't like ternary operator
  'SIM300', # Yoda is wiser than you!
  'TRY003',  # Avoid long messages outside of exception class
  #'TRY004',  # Use TypeError instead of ValueError
  'TRY301',  # Abstract raise garbage
  ]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"




